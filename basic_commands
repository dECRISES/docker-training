----------------------------***********Download specific version****************-----------------------------


curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

chmod 755 /usr/local/bin/docker-compose

docker-compose -v

----------------------------******************************************************-----------------------------

----------------------------***********YAML configuration file****************-----------------------------

version: '3.3'

networks:
  nw1:
  nw2:

services:
  mycompdb:
    image: mysql:5.7
    container_name: mycompdb
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - nw1
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: mywordpress
      MYSQL_USER: mywordpress
      MYSQL_PASSWORD: mywordpress

  mywordpress:
    depends_on:
      - mycompdb
    image: wordpress:latest
    ports:
      - 8000:80
    networks:
      - nw1
      - nw2
    restart: always
    environment:
      WORDPRESS_DB_HOST: mycompdb:3306
      WORDPRESS_DB_USER: mywordpress
      WORDPRESS_DB_PASSWORD: mywordpress
      WORDPRESS_DB_NAME: mywordpress

volumes:
  db_data: {}

----------------------------******************************************************-----------------------------
----------------------------*******************Important Links********************-----------------------------
https://github.com/karthick1808/docker-cheat-sheet
https://github.com/karthick1808/karthickdocker/blob/master/Dockerfile
https://github.com/karthick1808/docker-stack
----------------------------******************************************************-----------------------------
Private: Ips
http://172.31.38.4/
http://172.31.38.115/
http://172.31.45.221/
Public Ips
http://13.126.146.226:5000/
http://13.126.146.226:5001/
----------------------------*********************Kubernetes*********************************-----------------------------
https://github.com/gopal1409/socgenjanend/

Load the .pem file created from AWS key pair generated in PuttyGen and create a private key.
Login To putty with the private key generated by the PuttyGen.
login as: centos
Authenticating with public key "imported-openssh-key"
    1  yum install -y yum-utils \ device-mapper-persistent-data \ lvm2
    2  yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
    3  yum install docker-ce docker-ce-cli containerd.io
    4  service docker start
    5  chkconfig docker on
    6  cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

    7  cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

    8  setenforce 0
    9  sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
   10  yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
   11  systemctl enable --now kubelet
   12  cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

   13  sysctl --system
   14  systemctl daemon-reload
   15  systemctl restart kubelet
   16  history

 //Set hostname
 hostnamectl set-hostname --static k8node2
 vi /etc/cloud/cloud.cfg 
 preserve_hostname = true

//Set hostnames to provide the naming conventions
vi /etc/hosts
172.31.45.42 k8master
172.31.40.242 k8slave1
172.31.39.216 k8slave2

Install Kubernetes on CentOs 
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

github.com/gopal1409/socgenjanend

//To promote a machine to master
kubeadm init
//THEN
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

//Execute this command in wokrker nodes, which we ger from init of kubeadm 
kubeadm join 172.31.45.42:6443 --token 5mma9v.mr5xdwk6gm3kea72     --discovery-token-ca-cert-hash sha256:ce392e55c71860833f43f32936243cc1743294e79faa9902cbb9ac88de8acc10


//kublet get nodes will show the nodes status as not ready
//because we need to install cni pugins in worker nodes. After network weaving, workder nodes will be ready
Execute kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

//To show the containers which are depolyed, it will show the three new wave networks
kubectl get pods --all-namespaces

Encapsulation of the frontend + Banckend in a container is called Pods.
Can be achieved using the standard messaging queue.
|-----------------------|
|	Frontend	|
|         +		|
|        Backend	|
|	  +		|
|        Logs  	    	|
|-----------------------|

kubectl get namespaces

*****************************configuration files for Kubernetes******************
dev.yaml>>
apiVersion: v1
kind: Namespace
metadata:
    name: development

pod.yaml>>

apiVersion: v1
kind: Pod
metadata:
    name: nginx-deployment
    labels:
      name: nginx

spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80


********************************************************************************
//To check the logs about my Pod, see on which node the pod is runningclear
kubectl describe pod nginx-deployment

//Link spec with namespace
kubectl apply -f quota-mem-cpu.yaml --namespace=quota-mem-cpu-example
//See the config output in yaml file
kubectl get resourcequota mem-cpu-demo --namespace=quota-mem-cpu-example --output=yaml
